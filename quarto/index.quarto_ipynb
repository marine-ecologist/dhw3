{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"D3HW\"\n",
        "format:\n",
        "  html:\n",
        "    toc: false\n",
        "    page-layout: full\n",
        "---\n",
        "\n",
        "\n",
        "<style>\n",
        "  h1.title { display: none; }\n",
        "</style>\n",
        "\n",
        "\n",
        "```{js}\n",
        "document.addEventListener(\"DOMContentLoaded\", function() {\n",
        "\tconst style = document.createElement('style');\n",
        "\tstyle.textContent = `\n",
        "\t  body {\n",
        "\t    background-color: #333;\n",
        "\t    color: white;\n",
        "\t    font-family: Helvetica, sans-serif;\n",
        "\t    margin: 0;\n",
        "\t    padding: 0;\n",
        "\t  }\n",
        "\t  #heatmap-container {\n",
        "\t    width: 100%;\n",
        "\t    display: flex;\n",
        "\t    flex-direction: column;\n",
        "\t    align-items: center;\n",
        "\t  }\n",
        "\t  #header {\n",
        "\t    position: sticky;\n",
        "\t    top: 0;\n",
        "\t    background: #333;\n",
        "\t    z-index: 2000;\n",
        "\t    display: flex;\n",
        "\t    justify-content: space-between;\n",
        "\t    width: 100%;\n",
        "\t    max-width: 1500px;\n",
        "\t    box-sizing: border-box;\n",
        "\t    padding: 5px 40px;\n",
        "\t  }\n",
        "\t  .fa-circle-xmark:hover {\n",
        "\t    color: #FF8888;\n",
        "\t  }\n",
        "\t  #col-labels-wrapper {\n",
        "\t    background-color: #333;\n",
        "\t    width: 100%;\n",
        "\t    overflow: hidden;\n",
        "\t    position: sticky;\n",
        "\t    top: 45px;\n",
        "\t    z-index: 1000;\n",
        "\t  }\n",
        "\t  #col-labels-svg {\n",
        "\t    display: block;\n",
        "\t  }\n",
        "\t  #heatmap-scroll {\n",
        "\t    width: 100%;\n",
        "\t    overflow-x: auto;\n",
        "\t  }\n",
        "\t  #heatmap-svg {\n",
        "\t    display: block;\n",
        "\t  }\n",
        "\t`;\n",
        "\tdocument.head.appendChild(style);\n",
        "\t\n",
        "\t\n",
        "  let currentDataset = 'https://raw.githubusercontent.com/marine-ecologist/dhw3/refs/heads/main/data/CRW_DHWmax.csv';\n",
        "  let currentSelectedReefs = [];\n",
        "  let currentRowHeight = 1.5;\n",
        "  let userSelectedRowHeight = currentRowHeight;\n",
        "\n",
        "  const fixedHeatmapWidth = 1400;\n",
        "  const heatmapContainer = document.getElementById('heatmap-container');\n",
        "  const svg = d3.select(\"#heatmap-svg\");\n",
        "  const colLabelsSvg = d3.select(\"#col-labels-svg\");\n",
        "\n",
        "  let reefSelect, rowHeightSlider;\n",
        "  let currentMeta, currentMatrix, yearColumns;\n",
        "\n",
        "  buildHeader();\n",
        "\n",
        "  function buildHeader() {\n",
        "  let header = document.getElementById('header');\n",
        "\tif (!header) {\n",
        "\t  header = document.createElement('div');\n",
        "\t  header.id = 'header';\n",
        "\t  document.body.insertBefore(header, document.body.firstChild);\t\n",
        "\t  } else {\n",
        "\t  header.innerHTML = '';\n",
        "\t}\n",
        "    const leftContainer = document.createElement('div');\n",
        "    leftContainer.style.display = 'flex';\n",
        "    leftContainer.style.alignItems = 'center';\n",
        "    leftContainer.style.gap = '20px';\n",
        "\n",
        "    const datasetWrapper = document.createElement('div');\n",
        "    datasetWrapper.style.display = 'flex';\n",
        "    datasetWrapper.style.alignItems = 'center';\n",
        "    datasetWrapper.style.gap = '6px';\n",
        "\n",
        "    const datasetLabel = document.createElement('i');\n",
        "    datasetLabel.className = 'fa-solid fa-database';\n",
        "    datasetLabel.title = 'Select dataset';\n",
        "    datasetLabel.style.color = 'white';\n",
        "    datasetLabel.style.fontSize = '16px';\n",
        "    datasetLabel.style.cursor = 'pointer';\n",
        "\n",
        "    const datasetSelect = document.createElement('select');\n",
        "    datasetSelect.style.width = '180px';\n",
        "    datasetSelect.style.background = '#333';\n",
        "    datasetSelect.style.color = 'white';\n",
        "    datasetSelect.style.border = '1px solid #004a5c';\n",
        "    datasetSelect.style.borderRadius = '4px';\n",
        "\n",
        "    const datasets = [\n",
        "      { name: 'CoralTemp v3.1', value: 'https://raw.githubusercontent.com/marine-ecologist/dhw3/refs/heads/main/data/CRW_DHWmax.csv' },\n",
        "      { name: 'OISST v2.1', value: 'https://raw.githubusercontent.com/marine-ecologist/dhw3/refs/heads/main/data/OISST_DHWmax.csv' },\n",
        "      { name: 'ERA v5', value: 'https://raw.githubusercontent.com/marine-ecologist/dhw3/refs/heads/main/data/ERA5_DHWmax.csv' }\n",
        "    ];\n",
        "\n",
        "    datasets.forEach(d => {\n",
        "      const option = document.createElement('option');\n",
        "      option.value = d.value;\n",
        "      option.textContent = d.name;\n",
        "      datasetSelect.appendChild(option);\n",
        "    });\n",
        "\n",
        "    datasetSelect.value = currentDataset;\n",
        "    datasetSelect.addEventListener('change', () => {\n",
        "      currentDataset = datasetSelect.value;\n",
        "      loadData(currentDataset);\n",
        "    });\n",
        "\n",
        "    datasetWrapper.appendChild(datasetLabel);\n",
        "    datasetWrapper.appendChild(datasetSelect);\n",
        "    leftContainer.appendChild(datasetWrapper);\n",
        "\n",
        "    const spacer = document.createElement('div');\n",
        "    spacer.style.width = '30px';\n",
        "    leftContainer.appendChild(spacer);\n",
        "\n",
        "    const sliderWrapper = document.createElement('div');\n",
        "    sliderWrapper.style.display = 'flex';\n",
        "    sliderWrapper.style.alignItems = 'center';\n",
        "    sliderWrapper.style.gap = '8px';\n",
        "    sliderWrapper.style.color = 'white';\n",
        "\n",
        "    const zoomOutIcon = document.createElement('i');\n",
        "    zoomOutIcon.className = 'fa-solid fa-magnifying-glass-minus';\n",
        "\n",
        "    const zoomInIcon = document.createElement('i');\n",
        "    zoomInIcon.className = 'fa-solid fa-magnifying-glass-plus';\n",
        "\n",
        "    const slider = document.createElement('input');\n",
        "    slider.type = 'range';\n",
        "    slider.min = 0.25;\n",
        "    slider.max = 20;\n",
        "    slider.step = 0.1;\n",
        "    slider.value = currentRowHeight;\n",
        "    slider.style.cursor = 'pointer';\n",
        "\n",
        "    slider.addEventListener('input', function () {\n",
        "      userSelectedRowHeight = +this.value;\n",
        "      if (currentSelectedReefs.length === 0) {\n",
        "        currentRowHeight = userSelectedRowHeight;\n",
        "        drawHeatmap(currentMeta, currentMatrix);\n",
        "      }\n",
        "    });\n",
        "\n",
        "    sliderWrapper.appendChild(zoomOutIcon);\n",
        "    sliderWrapper.appendChild(slider);\n",
        "    sliderWrapper.appendChild(zoomInIcon);\n",
        "\n",
        "    leftContainer.appendChild(sliderWrapper);\n",
        "    rowHeightSlider = slider;\n",
        "\n",
        "    const rightContainer = document.createElement('div');\n",
        "    rightContainer.style.display = 'flex';\n",
        "    rightContainer.style.alignItems = 'center';\n",
        "    rightContainer.style.gap = '10px';\n",
        "\n",
        "    const selectElement = document.createElement('select');\n",
        "    selectElement.id = 'reefSelect';\n",
        "    selectElement.multiple = true;\n",
        "    selectElement.style.width = '400px';\n",
        "\n",
        "    const clearButton = document.createElement('i');\n",
        "    clearButton.className = 'fa-solid fa-circle-xmark';\n",
        "    clearButton.title = 'Clear selection';\n",
        "    clearButton.style.fontSize = '20px';\n",
        "    clearButton.style.color = '#FFF';\n",
        "    clearButton.style.cursor = 'pointer';\n",
        "\n",
        "    clearButton.addEventListener('click', () => {\n",
        "      if (selectElement.tomselect) {\n",
        "        selectElement.tomselect.clear();\n",
        "        currentSelectedReefs = [];\n",
        "        currentRowHeight = userSelectedRowHeight;\n",
        "        rowHeightSlider.value = userSelectedRowHeight;\n",
        "        drawHeatmap(currentMeta, currentMatrix);\n",
        "      }\n",
        "    });\n",
        "\n",
        "    rightContainer.appendChild(selectElement);\n",
        "    rightContainer.appendChild(clearButton);\n",
        "\n",
        "    header.appendChild(leftContainer);\n",
        "    header.appendChild(rightContainer);\n",
        "\n",
        "    reefSelect = selectElement;\n",
        "  }\n",
        "\n",
        "  function loadData(dataset) {\n",
        "    d3.csv(dataset).then(data => {\n",
        "      currentMeta = data.map(row => ({ id: row.ID, reef: row.Reef, lat: +row.lat }));\n",
        "      yearColumns = data.columns.filter(c => !['ID', 'Reef', 'lat'].includes(c));\n",
        "      currentMatrix = data.map(row => yearColumns.map(year => +row[year]));\n",
        "      setupTomSelect(currentMeta);\n",
        "      drawHeatmap(currentMeta, currentMatrix);\n",
        "    });\n",
        "  }\n",
        "\n",
        "  function getRowHeight() {\n",
        "    return currentSelectedReefs.length > 0 ? 20 : userSelectedRowHeight;\n",
        "  }\n",
        "\n",
        "  function drawHeatmap(meta, matrix) {\n",
        "    svg.selectAll(\"*\").remove();\n",
        "    d3.selectAll('.tooltip').remove();\n",
        "\n",
        "    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n",
        "    const rowHeight = getRowHeight();\n",
        "    heatmapContainer.style.alignItems = currentSelectedReefs.length > 0 ? 'center' : 'flex-start';\n",
        "\n",
        "    const cellWidth = fixedHeatmapWidth / yearColumns.length;\n",
        "\n",
        "    svg.attr(\"width\", fixedHeatmapWidth + 70 + 20)\n",
        "       .attr(\"height\", matrix.length * rowHeight + 40 + 20);\n",
        "\n",
        "    colLabelsSvg.attr(\"width\", fixedHeatmapWidth + 70 + 20).attr(\"height\", 40);\n",
        "\n",
        "    colLabelsSvg.selectAll(\".colLabel\")\n",
        "      .data(yearColumns)\n",
        "      .join(\"text\")\n",
        "      .attr(\"class\", \"colLabel\")\n",
        "      .attr(\"x\", (d, i) => 70 + i * cellWidth + cellWidth / 2)\n",
        "      .attr(\"y\", 30)\n",
        "      .attr(\"text-anchor\", \"start\")\n",
        "      .attr(\"alignment-baseline\", \"bottom\")\n",
        "      .attr(\"fill\", \"white\")\n",
        "      .attr(\"font-size\", \"12px\")\n",
        "      .attr(\"transform\", (d, i) => `rotate(-45, ${70 + i * cellWidth + cellWidth / 2}, 30)`)\n",
        "      .text(d => d);\n",
        "\n",
        "    const container = svg.append(\"g\").attr(\"transform\", `translate(70,0)`);\n",
        "\n",
        "    const seen = new Set();\n",
        "    svg.selectAll(\".rowLabel\")\n",
        "      .data(meta)\n",
        "      .join(\"text\")\n",
        "      .attr(\"class\", \"rowLabel\")\n",
        "      .attr(\"x\", 60)\n",
        "      .attr(\"y\", (d, i) => 40 + i * rowHeight + rowHeight * 0.5)\n",
        "      .attr(\"text-anchor\", \"end\")\n",
        "      .attr(\"alignment-baseline\", \"middle\")\n",
        "      .attr(\"fill\", \"white\")\n",
        "      .attr(\"font-size\", \"15px\")\n",
        "      .text(d => {\n",
        "        if (currentSelectedReefs.length > 0) return `${d.reef} [${d.id}]`;\n",
        "        const roundedLat = d.lat.toFixed(1);\n",
        "        if (!seen.has(roundedLat)) {\n",
        "          seen.add(roundedLat);\n",
        "          const degrees = Math.floor(Math.abs(d.lat));\n",
        "          const minutes = Math.round((Math.abs(d.lat) - degrees) * 60);\n",
        "          return `${degrees}°${minutes.toString().padStart(2, '0')}'`;\n",
        "        }\n",
        "        return \"\";\n",
        "      });\n",
        "\n",
        "    matrix.forEach((rowData, rowIndex) => {\n",
        "      const row = container.append(\"g\")\n",
        "        .attr(\"transform\", `translate(0, ${rowIndex * rowHeight})`);\n",
        "\n",
        "      row.selectAll(\"rect\")\n",
        "        .data(rowData.map((value, colIndex) => ({ value, rowIndex, colIndex })))\n",
        "        .enter()\n",
        "        .append(\"rect\")\n",
        "        .attr(\"class\", \"cell\")\n",
        "        .attr(\"x\", d => d.colIndex * cellWidth)\n",
        "        .attr(\"width\", cellWidth)\n",
        "        .attr(\"height\", rowHeight)\n",
        "        .attr(\"fill\", d => isNaN(d.value) ? \"#000\" : d3.scaleLinear()\n",
        "          .domain([0, 3, 6, 9, 12, 15, 18, 21])\n",
        "          .range([\"#006f99\", \"#00A6E5\", \"#FFD700\", \"#FF8C00\", \"#B20000\", \"#660000\", \"#3D0000\", \"#3D0000\"])(d.value))\n",
        "        .on(\"mouseover\", function (event, d) {\n",
        "          const m = meta[d.rowIndex];\n",
        "          const year = yearColumns[d.colIndex];\n",
        "          tooltip.transition().duration(200).style(\"opacity\", 0.9);\n",
        "          tooltip.html(`<b>ID:</b> ${m.id}<br><b>Reef:</b> ${m.reef}<br><b>Latitude:</b> ${m.lat}<br><b>Year:</b> ${year}<br><b>DHW:</b> ${d.value}`)\n",
        "            .style(\"left\", (event.pageX + 10) + \"px\")\n",
        "            .style(\"top\", (event.pageY - 15) + \"px\");\n",
        "        })\n",
        "        .on(\"mouseout\", () => tooltip.transition().duration(500).style(\"opacity\", 0));\n",
        "    });\n",
        "  }\n",
        "\n",
        "  function setupTomSelect(meta) {\n",
        "    if (reefSelect.tomselect) reefSelect.tomselect.destroy();\n",
        "\n",
        "    const sortedOptions = meta.slice().sort((a, b) => a.reef.localeCompare(b.reef));\n",
        "\n",
        "    new TomSelect(reefSelect, {\n",
        "      plugins: ['remove_button'],\n",
        "      placeholder: 'Search by reef name or GBRMPA ID',\n",
        "      closeAfterSelect: false,\n",
        "      options: sortedOptions.map(d => ({ value: d.id, text: `${d.reef} [${d.id}]` })),\n",
        "      maxOptions: null,\n",
        "      items: currentSelectedReefs,\n",
        "      onItemAdd: function () {\n",
        "        currentSelectedReefs = this.items;\n",
        "        currentRowHeight = 20;\n",
        "        rowHeightSlider.value = currentRowHeight;\n",
        "        this.setTextboxValue('');\n",
        "        applyFilter();\n",
        "      },\n",
        "      onItemRemove: function () {\n",
        "        currentSelectedReefs = this.items;\n",
        "        currentRowHeight = this.items.length > 0 ? 20 : userSelectedRowHeight;\n",
        "        rowHeightSlider.value = currentRowHeight;\n",
        "        applyFilter();\n",
        "      },\n",
        "      onChange: function (selectedIds) {\n",
        "        currentSelectedReefs = selectedIds;\n",
        "        currentRowHeight = selectedIds.length > 0 ? 20 : userSelectedRowHeight;\n",
        "        rowHeightSlider.value = currentRowHeight;\n",
        "        applyFilter();\n",
        "      }\n",
        "    });\n",
        "  }\n",
        "\n",
        "  function applyFilter() {\n",
        "    if (currentSelectedReefs.length === 0) {\n",
        "      drawHeatmap(currentMeta, currentMatrix);\n",
        "    } else {\n",
        "      const filteredMeta = currentMeta.filter(d => currentSelectedReefs.includes(d.id));\n",
        "      const filteredMatrix = filteredMeta.map(d => {\n",
        "        const idx = currentMeta.findIndex(m => m.id === d.id);\n",
        "        return idx !== -1 ? currentMatrix[idx] : [];\n",
        "      });\n",
        "      drawHeatmap(filteredMeta, filteredMatrix);\n",
        "    }\n",
        "  }\n",
        "\n",
        "  loadData(currentDataset);\n",
        "});\n",
        "\n",
        "\n",
        "```"
      ],
      "id": "ce571c58"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}